<?php
/**
	Eleanor PHP Library ¬© 2024
	https://eleanor-cms.ru/library
	library@eleanor-cms.ru
*/

namespace Eleanor\Classes;
use Eleanor;

/** –°–∏—Å—Ç–µ–º–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ EleanorException */
class EE extends \Exception
{
	/** @var array –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏—Å–∫–ª—é—á–µ–Ω–∏—è */
	public array $extra=[];

	const int
		/** –†–∞–∑–º–µ—Ä –ª–æ–≥ —Ñ–∞–π–ª–∞, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ–Ω –±—É–¥–µ—Ç —Å–∂–∞—Ç */
		SIZE_TO_COMPRESS=2097152,#2 Mb

		/** –û—à–∏–±–∫–∞ –≤ php –∫–æ–¥–µ: –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ—Ç, –∫—Ç–æ –ø–∏—Å–∞–ª —ç—Ç–æ—Ç –∫–æ–¥ (—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫) */
		PHP=1,

		/** –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∫ —Ñ–∞–π–ª—É): –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ—Ç, –∫—Ç–æ –º–æ–∂–µ—Ç —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å */
		SYSTEM=2,

		/** –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —è–∑—ã–∫–æ–≤–æ–π —Ñ–∞–π–ª): –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ—Ç, –∫—Ç–æ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–≤–∞–ª */
		DATA=3,

		/** –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ): –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –Ω–µ—Ç üòÜ */
		USER=4;

	/** –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
	 * @param string $message –û–ø–∏—Å–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
	 * @param int $code –ö–æ–¥ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
	 * @param ?\Throwable $previous –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
	 * @param array $extra –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
	 *  [string file] –ò–º—è —Ñ–∞–π–ª–∞
	 *  [int line] –°—Ç—Ä–æ–∫–∞ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º
	 *  [int hint] –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é
	 *  [string input] –í—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–≤–∞–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ */
	public function __construct(string$message,int$code=self::USER,?\Throwable$previous=null,array$extra=[])
	{
		if(isset($previous))
			$extra+=$previous->extra ?? [ 'file'=>$previous->getFile(), 'line'=>$previous->getLine() ];

		if(isset($extra['file']))
			$this->file=$extra['file'];

		if(isset($extra['line']))
			$this->line=$extra['line'];

		unset($extra['file'],$extra['line']);
		$this->extra=$extra;

		parent::__construct($message,$code,$previous);
	}

	/** –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è. –û—Å–Ω–æ–≤–Ω–æ–π –Ω–∞—Å–ª–µ–¥—É–µ–º—ã–π –º–µ—Ç–æ–¥ */
	public function Log():void
	{
		if(!Eleanor\Library::$logs_enabled)
			return;

		$type=match($this->code){
			self::PHP=>'php',
			self::DATA=>'data',
			self::USER=>'user',
			self::SYSTEM=>'system',
			default=>'unknown'
		};

		$this->LogWriter(
			Eleanor\Library::$logs.$type,
			md5($this->line.$this->file.$this->code.$this->message),
			function($data)
			{
				#–ó–∞–ø–∏—Å—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω—É–∂–Ω–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –ª–æ–≥-—Ñ–∞–π–ª–∞ –ª—é–±—ã–º–∏ —á–∏—Ç–∞–ª–∫–∞–º–∏
				$data['n']??=0;#Counter
				$data['n']++;

				$data['u']=Url::$current;
				$data['d']=date('Y-m-d H:i:s');
				$data['l']=$this->line;
				$data['m']=$this->getMessage();
				$data['f']=$this->file;

				$log=<<<LOG
{$data['m']}
File: {$data['f']}[{$data['l']}]
URL: {$data['u']}
Last happened: {$data['d']}, total: {$data['n']}
LOG;

				return[$data,$log];
			}
		);
	}

	/** –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É */
	public function __toString():string
	{
		return$this->getMessage();
	}

	/** –ù–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥ —Ñ–∞–π–ª. –õ–æ–≥ –æ—à–∏–±–æ–∫ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –¥–≤—É—Ö —Ñ–∞–π–ª–æ–≤: *.log –∏ *.json –ü–µ—Ä–≤—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π
	 * —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ª—é–±—ã–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º. –í—Ç–æ—Ä–æ–π - —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ª—É–∂–µ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
	 * –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.
	 * @param string $pathfile –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏ –µ–≥–æ –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–¥–æ–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –º–µ—Ç–æ–¥–æ–º)
	 * @param string $id –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
	 * @param callback $F –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–µ–π –≤ .log —Ñ–∞–π–ª–µ. –ü–µ—Ä–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –≤–µ—Ä–Ω—É–ª–∞
	 * –≤ –ø—Ä–æ—à–ª—ã–π —Ä–∞–∑. –î–æ–ª–∂–Ω–∞ –≤–µ—Ä–Ω—É—Ç—å –º–∞—Å—Å–∏–≤ –∏–∑ –¥–≤—É—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ 0 - —Å–ª—É–∂–µ–±–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
	 * –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –µ–π –ø–µ—Ä–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º, 1 - —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø–∏—Å–∏ –≤ .log —Ñ–∞–π–ª
	 * @return bool */
	protected function LogWriter(string$pathfile,string$id,callable$F):bool
	{
		$dir=dirname($pathfile);

		if(!is_dir($dir))
			Files::MkDir($dir);

		$path2log=$pathfile.'.log';
		$path2json=$pathfile.'.json';

		$is_log=is_file($path2log);
		$is_json=is_file($path2json);

		if($is_log and !is_writeable($path2log) or !$is_log and !is_writeable(dirname($path2log)))
			return trigger_error("File {$path2log} is write-protected!",E_USER_ERROR);

		//–ê—Ä—Ö–∏–≤–∞—Ü–∏—è .log —Ñ–∞–π–ª–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ json —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—Å–∏–ª –ø–æ—Ä–æ–≥, –∑–Ω–∞—á–∏—Ç –µ–≥–æ –Ω–∏–∫—Ç–æ –Ω–µ —á–∏—Ç–∞–µ—Ç)
		if($is_log and filesize($path2log)>static::SIZE_TO_COMPRESS)
		{
			if(static::CompressFile($path2log,substr_replace($path2log,'_'.date('Y-m-d_H-i-s'),strrpos($path2log,'.'),0)))
			{
				unlink($path2log);

				if($is_json)
					unlink($path2json);
			}

			clearstatcache();
		}

		$json=$is_json ? file_get_contents($path2json) : false;
		$json=$json ? json_decode($json,true) : [];

		$change=isset($json[$id]);
		$data=$F($change ? $json[$id]['d'] : []);

		if(!is_array($data) or !isset($data[0],$data[1]))
			return false;

		[$data,$log]=$data;

		if($change and !isset($json[$id]['o'],$json[$id]['l']))
		{
			$change=false;

			unset($json[$id]);
		}

		if($change)
		{
			$offset=$json[$id]['o'];
			$length=$json[$id]['l'];

			unset($json[$id]);
			$size=$is_log ? filesize($path2log) : 0;

			if($size<$offset+$length)
			{
				$change=false;

				foreach($json as &$v)
					if($size<$v['o']+$v['l'])
						unset($v['o'],$v['l']);
				unset($v);
			}
		}

		if($change)
		{
			$fh=fopen($path2log,'rb+');

			if(flock($fh,LOCK_EX))
				$diff=Files::FReplace($fh,$log,$offset,$length);
			else
			{
				fclose($fh);
				return false;
			}

			if(is_int($diff))
				$length+=$diff;

			foreach($json as &$v)
				if($v['o']>$offset)
					$v['o']+=$diff;
			unset($v);
		}
		else
		{
			$fh=fopen($path2log,'a');

			if(flock($fh,LOCK_EX))
			{
				$size=fstat($fh);
				$offset=$size['size'];
				$length=strlen($log);

				fwrite($fh,$log.PHP_EOL.PHP_EOL);
			}
			else
			{
				fclose($fh);

				return false;
			}
		}

		$json[$id]=['o'=>$offset,'l'=>$length,'d'=>$data];

		flock($fh,LOCK_UN);
		fclose($fh);

		file_put_contents($path2json,json_encode($json,JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE));

		return true;
	}

	/** –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –ª–æ–≥ —Ñ–∞–π–ª–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞.
	 * @param string $source –ü—É—Ç—å –∫ —Å–∂–∏–º–∞–µ–º–æ–º—É —Ñ–∞–π–ª—É
	 * @param string $dest –ü—É—Ç—å —Å —Å–∂–∞—Ç–æ–º—É —Ñ–∞–π–ª—É (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—É)
	 * @return bool */
	public static function CompressFile(string$source,string$dest):bool
	{
		if(!is_file($source) or file_exists($dest) or !is_writable(dirname($dest)))
			return false;

		$hf=fopen($source,'r');
		$r=false;

		if(function_exists('bzopen') and $hbz=bzopen($dest.'.bz2','w'))
		{
			while(!feof($hf))
				bzwrite($hbz,fread($hf,1024*16));

			bzclose($hbz);
			$r=true;
		}
		elseif(function_exists('gzopen') and $hgz=gzopen($dest.'.gz','w9'))
		{
			while(!feof($hf))
				gzwrite($hgz,fread($hf,1024*64));

			gzclose($hgz);
			$r=true;
		}

		fclose($hf);

		return$r;
	}
}

return EE::class;